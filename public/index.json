[{"categories":["study"],"content":"啃透Java基础知识第二期","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"参考资料：《Java 核心技术卷 I》 本章介绍了关于Java基本数据类型和String字符串类的知识。 Java基本数据类型Java是一种强类型语言，即每一个变量都必须声明其数据类型。 Java中一共有8中基本数据类型，分别是表示整数的byte 、short 、int 、long ，表示浮点数（小数）的float 、double ，表示字符的char ，表示真值的boolean 。 ","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:0:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"\r整数类型整数类型用于表示整数，有byte 、short 、int 、long 。 byte 占1个字节，取值范围为$-2^7$ ~ $2^7-1$ ，即-128~127。 short 占2个字节，取值范围为$-2^{15}$ ~ $2^{15}-1$ ，即-32768~32767。 int 占4个字节，取值范围为$-2^{31}$ ~ $2^{31}-1$ ，即-2147483648~2147483647（略高于20亿）。 long 占8个字节，取值范围为$-2^{63}$ ~ $2^{63}-1$ 。 最常用的整数类型为int ，long 常用于存放int 类型放不下的大数，在Java中需要在数字后加入l 或者L来表示该数为long 类型。 Java中的整数常量默认为int 类型。 ","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:1:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"\r浮点数类型浮点数类型用于表示小数，有float 、double 。 float 占4个字节，取值范围为$\\pm3.40282347*10^{38}$ 。 double 占8个字节，取值范围为$\\pm1.79769313486231570*10^{308}$ Java中浮点数常量默认为double 类型。 在Java中需要在数字后加入f或者F来表示该数为float 类型。 注意\rJava中对浮点类型变量的计算并不是准确的，而是通过近似获得的。因此在进行运算后两浮点变量判断相等时，不能用== 来判断，而是应该利用差值小于某个精度来进行判断。\r有三个特殊的浮点值来表示出错和溢出： 常量Double.POSITIVE_INFINITY，表示正无穷大。 常量Double.NEGATIVE_INFINITY，表示负无穷大。 常量Double.NaN，表示数不存在。 注意\rDouble.NaN被认为是与其他所有数不相等的，包括它自己。因此检测一个结果是否为Double.NaN时不能使用== ，而是应该使用Double.isNaN（x） 方法。\r","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:2:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"\r字符类型字符类型用于表示字符，有char 。 char 占用两个字节，可以存放汉字。 char 类型常量通常用'' 表示，如'a' 。 类型的存储涉及到编码，例如一个char 类型变量为'a' ，则其存储在内存中的值为a 对应的编码值，在ASCII值编码中a的编码值为97。 技巧\r常见的编码有 ASCII码，字母用一个字节表示。 Unicode码，字母与汉字都用两个字节表示。 UTF-8码，字母用一个字节表示，汉字用三个字节表示。 GBK码，字母用一个字节表示，汉字用两个字节表示。 具体编码自行查阅百度。 char 类型变量可以进行运算，字符用其编码值参与运算。 public class hello { public static void main(String[] args){ char a = 'a'; System.out.println(a * 2); } } \u003e\u003e\u003e 194 public class hello { public static void main(String[] args){ char a = 'a' + 10; System.out.println(a); } } \u003e\u003e\u003e k 注意\r不建议使用char 类型变量，而是使用字符串String代替。\r","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:3:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"\r真值类型真值类型用于判定逻辑条件，有boolean 。 boolean 占用一个字节，取值只有true和false。 注意\r和C++不同，true和false不能用0与1替代。\r","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:4:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"\r数值类型转换分为自动类型转换和强制类型转换。 注意\rboolean 不参与类型转换。\r","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:5:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"\r自动类型转换我们知道不同数据类型占用的存储空间大小是不同的，两个不同的数据类型，根据存储空间大小可以将存储空间大的数据类型视作高精度类型，存储空间小的数据类型视作低精度类型。如int 相较于short 就是高精度数据类型。 在运算中，如果存在不同数据类型的变量参与，则会自动将低精度数据类型转换成高精度数据类型进行运算。 public class hello { public static void main(String[] args){ int n = 1; short m = 2; int a = n + m; //n + m -\u003e int System.out.println(a); } } \u003e\u003e\u003e 3 如果将一个高精度数据类型强行赋值给低精度数值类型，则会面临丢失精度的错误，编译程序会报错。 public class hello { public static void main(String[] args){ int n = 1; short m = 2; byte a = n + m; //n + m -\u003e int System.out.println(a); } } \u003e\u003e\u003e java: 不兼容的类型: 从int转换到byte可能会有损失 技巧\r两个不同类型的变量进行二元运算时，自动转换的原则如下： 如果两个操作数中有一个为double 类型，则另一个操作数转换成double 类型。 否则，如果一个操作数是float 类型，则另一个操作数转换成float 类型。 否则，如果一个操作数是long 类型，则另一个操作数转换成long 类型。 否则，两个操作数全部转为int 类型。 byte + short -\u003e int ","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:5:1","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"\r强制类型转换如果要实现高精度数据类型向低精度数据类型的转换，则需要使用强制类型转换。 浮点数向整数转换后，其小数点部分会被截断。例如： public class hello { public static void main(String[] args){ double m = 9.997; int a = (int)m; System.out.println(a); } } \u003e\u003e\u003e 9 技巧\r如果想要实现小数四舍五入的效果，可以使用Math.round() 方法。\r当一个超出低精度数据类型所能表示的范围的数转换成该数据类型时，其结果会变成一个完全不同的值，即发生了溢出。例如 public class hello { public static void main(String[] args){ int m = 300; byte a = (byte)m; System.out.println(a); } } \u003e\u003e\u003e 44 Java变量与常量","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:5:2","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"\r变量每个变量都有一个类型，同时都需要声明，如int a;。 变量名只能由字母，数字，货币符号以及标点连接符组成，且第一个字符不能为数字。一般都使用字母数字与下划线，字母区分大小写。 在声明一个变量之后，需要为其初始化，否则使用时会报错： public class hello { public static void main(String[] args){ int a; System.out.println(a); } } \u003e\u003e\u003e java: 可能尚未初始化变量a ","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:6:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"\r常量在Java中，可以使用关键字final 指示常量。 final 表示该变量只能被赋值一次，无法被更改。 通常常量名使用全大写。 ","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:7:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"\r枚举当一个变量的取值为有限个选择时，可以将这有限个选择声明为枚举类型。 enum Size { SMALL, MEDIUM, LARGE, EXTRA_LARGE}; 声明这种枚举类型的变量，其值为枚举类型中的某一值，或者为代表没有设置任何值的null 。 Size s = Size.MEDIUM; Java字符串Java中没有内置字符串数据类型，而是使用String类来当作字符串使用。 字符串用\"\"表示。 public class hello { public static void main(String[] args){ String a = \"\"; //空串 String e = \"abc\"; System.out.println(e); } } \u003e\u003e\u003e abc ","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:8:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"\r子串String类可以使用substring方法来提取子串： public class hello { public static void main(String[] args){ String a = \"\"; //空串 String e = \"abc\"; String ee = e.substring(0,2); //第二个参数为想要截取字串最后一个字符的后一个字符的位置 System.out.println(ee); } } \u003e\u003e\u003e ab ","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:9:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"\r字符串拼接String类允许使用+进行字符串拼接，任意非字符串的值与字符串拼接后都会变成字符串。 public class hello { public static void main(String[] args){ String a = \"ab\"; System.out.println(a + 22); } } \u003e\u003e\u003e ab22 public class hello { public static void main(String[] args){ String a = \"ab\"; int b = 22 System.out.println(a + b); } } \u003e\u003e\u003e ab22 技巧\rJava11中提供了一个repeat方法： String a = \"java\".repeat(3); // a is \"javajavajava\" 注意\r请辨析’a’ + 1与\"a\" + 1之间的区别！\r","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:10:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"\r修改字符串字符串是不可变的，无法直接对字符串中的某个字符进行修改。 如果想要对一个字符串进行修改，可以利用提取子串+拼接的方法。 技巧\rJava中，字符串是共享的。即复制一个字符串变量，仅仅是将新变量指向了原来变量指向的字符串所在的内存空间。\r","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:11:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"\r字符串相等String类提供了equals方法来判断两个字符串是否相等，返回值为true或false。 \"abc\".equals(\"abc\"); 同时提供了忽略大小写的equalsIgnoreCase方法。 \"abc\".equals(\"ABc\"); 注意\r请不要使用==来判断两字符串是否相等。该运算符的含义是判断两字符串变量是否指向同一位置。同一位置的两字符串变量必然相等，但相等的两字符串变量却未必在同一位置。\r","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:12:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"\r空串空串是长度为0的字符串，可以用 if(str.length() == 0) 或 if(str.equals(\"\")) 来判断是否为空串。 空串是一个Java对象，有长度（0）和内容（空）。 注意\rString变量还可以存放null，表示当前变量没有与任何对象关联，可用if(str == null)判断。\r","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:13:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"\r生成字符串在用若干个字符串生成新的字符串时，使用拼接过于效率低下，因此可以使用 StringBuilder类 StringBuffer类 这两个类的API是相同的，区别在于StringBuilder类效率更高，却只能单线程运行，StringBuffer类运行采用多线程方式添加或删除字符，但效率更低。 public class hello { public static void main(String[] args){ StringBuilder builder = new StringBuilder(); builder.append(\"cc\"); builder.append(\"dd\"); String ee = builder.toString(); System.out.println(ee); } } \u003e\u003e\u003e ccdd 常见API有 StringBuilder() ​ 构建一个空的字符串构建器。 int length() ​ 返回构建器中字符个数。 StringBuilder append(String str) ​ 追加一个String，返回this。 StringBuilder append(char c) ​ 追加一个char，返回this。 StringBuilder delete(int start, int end) ​ 删除从start到end-1的字符并返回this。 String tosString() ​ 返回一个与构建器中字符相同的字符串。 ","date":"2024-03-11","objectID":"/posts/java-basic-data-types-and-strings/:14:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】2Java基本数据类型与字符串","uri":"/posts/java-basic-data-types-and-strings/"},{"categories":["study"],"content":"你不能不知道的Java注释技巧","date":"2024-03-10","objectID":"/posts/java-annotation-techniques/","tags":["Java小知识"],"title":"你不能不知道的Java注释技巧","uri":"/posts/java-annotation-techniques/"},{"categories":["study"],"content":"参考资料：《Java 核心技术卷 I》 Java中的注释Java程序代码中，一些不想让程序运行但又很有必要的说明性文字被称为注释。注释可以为繁杂难懂的程序代码进行人性化解释，能够提高程序的易读性和可维护性。 总的来说，Java中有三种注释类型，分别是： 单行注释 多行注释 文档注释 下面分别来介绍一下这些注释的用法。 ","date":"2024-03-10","objectID":"/posts/java-annotation-techniques/:0:0","tags":["Java小知识"],"title":"你不能不知道的Java注释技巧","uri":"/posts/java-annotation-techniques/"},{"categories":["study"],"content":"\r1 单行注释Java中单行注释通常使用//来实现。放在//符号后的文字不会被程序编译运行。例如： public class hello { public static void main(String[] args){ //下面这个方法会打印出\"Hello world!\" System.out.println(\"Hello world！\"); } } \u003e\u003e\u003e Hello world! ","date":"2024-03-10","objectID":"/posts/java-annotation-techniques/:1:0","tags":["Java小知识"],"title":"你不能不知道的Java注释技巧","uri":"/posts/java-annotation-techniques/"},{"categories":["study"],"content":"\r2 多行注释上述的单行注释只能实现一行注释的输入，如果想要输入多行的注释，可以利用多个单行注释实现，如： public class hello { public static void main(String[] args){ //下面这个方法会打印出\"Hello world!\" //这是第二行了 System.out.println(\"Hello world！\"); } } \u003e\u003e\u003e Hello world! 但这样每换一行就要输入一次单行注释符不方便，我们可以利用多行注释符 /**/ 来实现多行注释，如： public class hello { public static void main(String[] args){ /* 下面这个方法会打印出\"Hello world!\" 这是第二行了 第三行 */ System.out.println(\"Hello world！\"); } } \u003e\u003e\u003e Hello world! 需要注意的是，多行注释符 /**/ 不能嵌套使用，如： public class hello { public static void main(String[] args){ /* 下面这个方法会打印出\"Hello world!\" 这是第二行了 /* 第三行 第四行 */ 第五行 */ System.out.println(\"Hello world！\"); } } \u003e\u003e\u003e java: 非法的表达式开始 因为多行注释符的匹配是按照 /*开始，之后的全是注释直到遇见了*/。而嵌套使用多行注释符时会导致注释的提前结束，进而产生语法错误。 ","date":"2024-03-10","objectID":"/posts/java-annotation-techniques/:2:0","tags":["Java小知识"],"title":"你不能不知道的Java注释技巧","uri":"/posts/java-annotation-techniques/"},{"categories":["study"],"content":"\r3 文档注释","date":"2024-03-10","objectID":"/posts/java-annotation-techniques/:3:0","tags":["Java小知识"],"title":"你不能不知道的Java注释技巧","uri":"/posts/java-annotation-techniques/"},{"categories":["study"],"content":"\r3.1 文档注释解析上述两种注释方法使用起来很方便，可以在代码的任何地方编写，起到解释代码提示功能的作用。当我们在进行一个庞大的Java项目编写时，我们往往需要为其中的每一个类文件甚至是每个类中的方法进行注释。此时虽然可以用上述两种注释方法，但查看起来很不方便，需要打开每个类文件的源文件找到具体方法才能看见。因此文档注释符能够帮我们将对模块、包、公共类和接口、公共和受保护的字段、公共和受保护的构造器与方法进行注释并提取生成一个帮助文档。 文档注释符通常放在要解释的特性（如类、接口、方法等）前面，以/**开始，直到*/结束，其中是自由格式文本，意味着 html 修饰符也是允许的。下面是一个例子： /** * 一个打印Hello world！的类 * @author wuqimotou * @version 1.0 * @since * @see \"test\" */ public class hello { public static void main(String[] args){ System.out.println(\"Hello world！\"); } } 可以看到在主类hello前面有一段文档注释，这个注释解释了这个类的一些信息。其中有一些令人迷惑的地方，比如*@author* ，@version 等这些是什么？ 标记，以*@开始，如@author* ，@version 等，用于对所要注释的内容的一些基本信息进行解释，如*@author* 标明了该类的编写者身份，@version 标明了该类当前的版本等。 还有一些其他的标记，如： @param @return @throws 这三个标记可用于方法之前的文档注释中，@param 添加了一个注释标明了当前方法的参数，@return 添加了一个注释标明了当前方法的返回值。@throws 添加了一个注释标明了当前方法可能抛出的异常。如： public class hello { /** * hello类的主方法 * @param 运行时可带的参数 * @return 不返回值 */ public static void main(String[] args){ System.out.println(\"Hello world！\"); System.out.println(\"Hello world！\"); } } @since 会添加一条表示该文档注释是从哪个版本开始的。 @see 和*@link* 是用于添加超链接的。不过这两个有略微不同。@see 将会在文档注释所转换的帮助文档中的see also部分增加超链接，而*@link* 可以在注释的任意地方插入超链接。 以*@see* 举例来说明*@see* 和*@link* 插入超链接的书写方法，有三种方式： @see package.class#feature label @see \u003ca href=\"…\"\u003e label \u003c/a\u003e @see “text” 第一种方式可以用来插入一个指向某方法的超链接，而只需要提供包名，类名与方法名。例子如下： @see com.horstmann.corejava.Emplyee#raiseSalary(double) 技巧\r若要指向的包位于当前包或当前类，则可以省去包名或者省去包名与类名！\r第二种方式可以用于插入任意的URL，如下： @see \u003ca href=\"www.baidu.com\"\u003e 百度 \u003c/a\u003e 第三种方式用于添加文本。 注意\r可以使用多个*@see* 标记，但*@see* 必须放在一起，不能在其中穿插其他标记。\r@link 用法与*@see* 类似。 ","date":"2024-03-10","objectID":"/posts/java-annotation-techniques/:3:1","tags":["Java小知识"],"title":"你不能不知道的Java注释技巧","uri":"/posts/java-annotation-techniques/"},{"categories":["study"],"content":"\r3.2 文档注释提取在要提取文档注释的源文件目录下执行以下命令： javadoc -d docDirectory name1 name2 其中docDirectory为提取出的帮助文档所存放的目录，name1 name2为要提取的源文件。 ","date":"2024-03-10","objectID":"/posts/java-annotation-techniques/:3:2","tags":["Java小知识"],"title":"你不能不知道的Java注释技巧","uri":"/posts/java-annotation-techniques/"},{"categories":["study"],"content":"Java编程中转义字符\r回车和\n换行的区别","date":"2024-03-10","objectID":"/posts/the-difference-between-%5Cn-and-%5Cr/","tags":["Java小知识"],"title":"Java编程中关于转义字符\\n换行与\\r回车的区别","uri":"/posts/the-difference-between-%5Cn-and-%5Cr/"},{"categories":["study"],"content":"\\n和\\r有什么区别？ 什么是转义字符？ 转义字符是很多程序语言、数据格式和通信协议的形式文法的一部分。对于一个给定的字母表，一个转义字符的目的是开始一个字符序列，使得转义字符开头的该字符序列具有不同于该字符序列单独出现时的语义。因此转义字符开头的字符序列被叫做转义序列。 转义序列通常有两种功能。第一个是编码一个句法上的实体，如设备命令或者无法被字母表直接表示的特殊数据。第二种功能，也叫字符引用，用于表示无法在当前上下文中被键盘录入的字符（如字符串中的回车符），或者在当前上下文中会有不期望的含义的字符（如C语言字符串中的双引号字符\"，不能直接出现，必须用转义序列表示）。在后面那种情况，转义序列是一种由转义字符自身和一个被引用的字符组成的一个二合字母（digraph）情形。 Java中常见的转义字符有： \\t 制表符 \\n 换行符 \\r 回车符 \\\\ 斜杠符 \\\" 双引号符 \\’ 单引号符 受日常Windows系统使用经验的影响，其中换行符\\n和回车符\\r是容易混淆的两个概念，下面来简单辨析一下这两种转义字符之间的关系与区别。 换行符与回车符的起源 在计算机还没有出现之前，有一种叫做电传打字机（Teletype Model 33，Linux/Unix下的tty概念也来自于此）的玩意，每秒钟可以打10个字符。但是它有一个问题，就是打完一行换行的时候，要用去0.2秒，正好可以打两个字符。要是在这0.2秒里面，又有新的字符传过来，那么这个字符将丢失。 于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做“回车”，告诉打字机把打印头定位在左边界；另一个叫做“换行”，告诉打字机把纸向下移一行。这就是“换行”和“回车”的来历，从它们的英语名字上也可以看出一二。 后来，计算机发明了，这两个概念也就被般到了计算机上。那时，存储器很贵，一些科学家认为在每行结尾加两个字符太浪费了，加一个就可以。于是，就出现了分歧。 Unix系统里，每行结尾只有“\u003c换行\u003e”，即\"\\n\"； Windows系统里面，每行结尾是“\u003c回车\u003e\u003c换行\u003e”，即“\\r\\n”； Mac系统里，每行结尾是“\u003c回车\u003e”，即\"\\r\"；。 编写Java程序时使用\\r与\\n的区别使用\\r时，如： System.out.println(\"Hello world！\"); \u003e\u003e\u003e Hello world! System.out.println(\"Hello \\rworld！\"); \u003e\u003e\u003e world! 使用\\n时，如： System.out.println(\"Hello world！\"); \u003e\u003e\u003e Hello world! System.out.println(\"Hello \\nworld！\"); \u003e\u003e\u003e Hello world! 同时使用\\r\\n时，如： System.out.println(\"Hello world！\"); \u003e\u003e\u003e Hello world! System.out.println(\"Hello \\r\\nworld！\"); \u003e\u003e\u003e Hello world! 可见， 当输出包含\\r回车符的字符串时，输出的光标会在指向\\r时回到当前行首，清空之前该行的输出内容，以\\r之后的内容重新输出。 当输出包含\\n换行符的字符串时，输出的光标会在指向\\r时跳到下一行的行首，并以\\n之后的内容输出。 当输出包含\\r\\n的字符串时，效果同\\n换行符。 ","date":"2024-03-10","objectID":"/posts/the-difference-between-%5Cn-and-%5Cr/:0:0","tags":["Java小知识"],"title":"Java编程中关于转义字符\\n换行与\\r回车的区别","uri":"/posts/the-difference-between-%5Cn-and-%5Cr/"},{"categories":["study"],"content":"啃透Java基础知识第一期","date":"2024-03-06","objectID":"/posts/things-you-need-to-know-about-java/","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】1什么是Java？关于Java你需要知道的一些事","uri":"/posts/things-you-need-to-know-about-java/"},{"categories":["study"],"content":"参考资料：《Java 核心技术卷 I》 本章简单介绍了一些关于Java的背景知识。 什么是Java？","date":"2024-03-06","objectID":"/posts/things-you-need-to-know-about-java/:0:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】1什么是Java？关于Java你需要知道的一些事","uri":"/posts/things-you-need-to-know-about-java/"},{"categories":["study"],"content":"\r1 Java简史 1991年，为了设计一种用于有线电视转换盒之类的消费设备的小型计算机语言，美国Sun公司的Patrick Naughton和James Gosling带领一个工程师小组启动了名为”Green“的项目，并将所设计出的语言命名为”Oak“（后改名为Java）。 1992年，基于Java语言的第一个产品”*7“发布。该产品可以提供非常智能的远程控制，可惜的是反响平平。 1993年至1994年初，”Green“项目改名为”First Person公司“，并一直苦苦挣扎。 1994年，”First Person公司“解散。 1995年，在SunWorld'95大会上展示的基于Java语言编写的HotJava浏览器终于引起了全世界编程工作者与爱好者对Java的狂热追逐。 1996年初，Java1版本发布，这个版本存在很多缺陷，以至于难以实现真正的应用开发。 1997年，该年发布的Java1.1版本改进了许多1.0版本所存在的缺陷。 1998年，Java1.2版本发布，并在发布三天后为Java提供了三个版本，分别为Java2标准版软件开发包即J2SE；Java2微型版软件开发包即J2ME；Java2企业版软件开发包即J2EE，软件开发包版本号1.2。（在之后版本中分别改名为JavaSE，JavaME，JavaEE） 2000年，Java1.3版本发布，对应Java软件开发包版本为JDK1.3。 2002年，Java1.4版本发布，对应Java软件开发包版本为JDK1.4。 2004年，Java5版本发布，版本号从1.4直接增加到了5，对应Java软件开发包版本为JDK1.5。 2006年，Java6版本发布，对应Java软件开发包版本为JDK1.6。 2009年，开发Java语言的母公司Sun被Oracle公司收购。 2011年，Java7版本发布，对应Java软件开发包版本为JDK1.7。 2014年，Java8版本发布，对应Java软件开发包版本为JDK1.8。 2017年，Java9版本发布，对应Java软件开发包版本为JDK1.9。 2018年，Java10版本发布，对应Java软件开发包版本为JDK10。 。。。 2023年，Java21版本发布，对应Java软件开发包版本为JDK21。 ","date":"2024-03-06","objectID":"/posts/things-you-need-to-know-about-java/:1:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】1什么是Java？关于Java你需要知道的一些事","uri":"/posts/things-you-need-to-know-about-java/"},{"categories":["study"],"content":"\r2 Java的一些特点","date":"2024-03-06","objectID":"/posts/things-you-need-to-know-about-java/:2:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】1什么是Java？关于Java你需要知道的一些事","uri":"/posts/things-you-need-to-know-about-java/"},{"categories":["study"],"content":"\r2.1 简单性学过C++语言的人应该知道，尽管C++功能强大，但是一些语法结构是非常复杂的，如果不熟练是很难用好的。而相对于C++，以其为语言基础的Java在大部分语法上都有着与其类似的特性，但是在一些很少使用，难以理解的特性方面，Java作出了一定的舍弃，例如Java中没有头文件，没有指针，没有结构体等。这在很大程度上简化了程序员利用Java进行编程的过程，降低了难度。与此同时，Java提供了庞大的类库也是让编程变得更简单的不可忽视的原因 。 注意\r其实从另外一个方面去想Java的简单性，就是它的解释器和类库等都很简单，可以运行在小型机器上。\r","date":"2024-03-06","objectID":"/posts/things-you-need-to-know-about-java/:2:1","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】1什么是Java？关于Java你需要知道的一些事","uri":"/posts/things-you-need-to-know-about-java/"},{"categories":["study"],"content":"\r2.2 面向对象什么是对象，一个学校的管理系统里有一百个学生条例，一个学生条例就可以是一个对象。每个对象都有自己的属性，就像学生有自己的名字，性别，学号等。而每个对象也有若干个接口，就像管理系统中每个学生条例都有个人信息，设置这些个人信息不能直接在数据库中进行修改，要利用每个学生条例中的设置个人信息功能进行设置，而这里的设置个人信息功能就可以当作学生条例的接口。 与C语言的面向过程编程不同，Java将编程的重点放在对象和对象的接口上，而不是代码编写的过程上。利用好对象与接口的概念可以极大程度提高编程的便利性。 ","date":"2024-03-06","objectID":"/posts/things-you-need-to-know-about-java/:2:2","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】1什么是Java？关于Java你需要知道的一些事","uri":"/posts/things-you-need-to-know-about-java/"},{"categories":["study"],"content":"\r2.3 分布式分布在不同地区的Java应用程序可以迅速便捷地访问互联网上的资源。 ","date":"2024-03-06","objectID":"/posts/things-you-need-to-know-about-java/:2:3","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】1什么是Java？关于Java你需要知道的一些事","uri":"/posts/things-you-need-to-know-about-java/"},{"categories":["study"],"content":"\r2.4 健壮性Java强调进行早期的问题检测，后期的动态检测以及错误改正，相对于其他语言来说，Java可以在运行之前就检测出它们只能在运行时检测出的bug。 ","date":"2024-03-06","objectID":"/posts/things-you-need-to-know-about-java/:2:4","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】1什么是Java？关于Java你需要知道的一些事","uri":"/posts/things-you-need-to-know-about-java/"},{"categories":["study"],"content":"\r2.5 安全性Java被设计成： 防范运行时堆栈溢出。 防范破坏进程空间之外的内存。 防范未经授权读写文件。 在后续版本中也逐渐丰富其防范攻击的能力。 ","date":"2024-03-06","objectID":"/posts/things-you-need-to-know-about-java/:2:5","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】1什么是Java？关于Java你需要知道的一些事","uri":"/posts/things-you-need-to-know-about-java/"},{"categories":["study"],"content":"\r2.6 体系结构中立Java代码是运行在虚拟机上的，因此编写Java代码时不用考虑所运行的计算机的体系结构，各种指令集都可以通过虚拟机来运行Java代码编译出来的字节码。 注意\r在计算机中，数据只用0和1两种表现形式，(这里只表示一个数据点，不是数字)，一个0或者1占一个“位”，而系统中规定8个位为一个字节，用来表示常用的256个字母、符号、控制标记，其中用一个位来进行数据校验，其他七个位用来记录数据。 字节码（Byte-code）是一种包含执行程序、由一序列代码/数据对组成的二进制文件。字节码是一种中间码，它比机器码更抽象。它经常被看作是包含一个执行程序的二进制文件。 ","date":"2024-03-06","objectID":"/posts/things-you-need-to-know-about-java/:2:6","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】1什么是Java？关于Java你需要知道的一些事","uri":"/posts/things-you-need-to-know-about-java/"},{"categories":["study"],"content":"\r2.7 可移植性Java中数据类型以及运算都是明确规定好的，因此在移植Java代码的过程中不用考虑像C++代码可能出现的因编译器不同导致的数据类型大小不同的问题。 同时Java底层的类库根据不同的操作系统提供了接口不同的实现方式，因此像操作系统这样的底层因素也不用考虑。 ","date":"2024-03-06","objectID":"/posts/things-you-need-to-know-about-java/:2:7","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】1什么是Java？关于Java你需要知道的一些事","uri":"/posts/things-you-need-to-know-about-java/"},{"categories":["study"],"content":"\r2.8 解释性传统认知里，Java是编译型编程语言，即代码编写完成后需要经过编译才能运行。而解释型编程语言在代码编写完成后不需要编译即可运行，这无疑能更有探索代码的运行逻辑。 Java9中提供了jshell工具来支持解释型编程。 技巧\r解释型编程语言还有Lisp，Smalltalk，Visual Basic，Python，R和Scala等。\r注意\r尽管解释型语言在程序编写调试上有着更大的便利，但相较于编译型语言来说，其运行效率是短板。\r","date":"2024-03-06","objectID":"/posts/things-you-need-to-know-about-java/:2:8","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】1什么是Java？关于Java你需要知道的一些事","uri":"/posts/things-you-need-to-know-about-java/"},{"categories":["study"],"content":"\r2.9 高性能Java所用的即使编译器可以监控哪些代码频繁运行，并优化这些代码以提高执行速度，同时还可以使用”内联“技术来进一步优化代码。 ","date":"2024-03-06","objectID":"/posts/things-you-need-to-know-about-java/:2:9","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】1什么是Java？关于Java你需要知道的一些事","uri":"/posts/things-you-need-to-know-about-java/"},{"categories":["study"],"content":"\r2.10 多线程多线程可以带来更好的交互响应和实时行为。 Java是第一个支持并发程序设计的编程语言，可以很好地利用多线程的优势。 注意\r多线程（multithreading），是指从软件或者硬件上实现多个线程并发执行的技术。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。具有这种能力的系统包括对称多处理机、多核心处理器以及芯片级多处理或同时多线程处理器。在一个程序中，这些独立运行的程序片段叫作“线程”（Thread）\r","date":"2024-03-06","objectID":"/posts/things-you-need-to-know-about-java/:2:10","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】1什么是Java？关于Java你需要知道的一些事","uri":"/posts/things-you-need-to-know-about-java/"},{"categories":["study"],"content":"\r2.11 动态性Java支持更新正在运行的程序的代码 ","date":"2024-03-06","objectID":"/posts/things-you-need-to-know-about-java/:2:11","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】1什么是Java？关于Java你需要知道的一些事","uri":"/posts/things-you-need-to-know-about-java/"},{"categories":["study"],"content":"\r3 总结在Java初次面世时，《Java 核心技术卷 I》的作者们曾是这样认为Java的： ”As, a computer language, Java’s hype is overdone: Java is certainly a good programming language. There is no doubt that it is one of the better language savailable to serious programmers. We think it could potentially have been a great programming language, but it is probably too late for that. Once a language is out in the field, the ugly reality of compatibility with existingcodesetsin.“ 中文就是: 作为一种计算机语言，Java的广告词确实有点夸大其词。当然，Java的确是一种优秀的程序设计语言。作为一个名副其实的程序设计人员，使用Java无疑是一个比较好的选择。我们认为：Java本来有潜力成为一种卓越的程序设计语言，但可能有些为时过晚，一旦一种语言得到广泛应用，与现存代码尴尬的兼容性问题就摆在了人们的面前。 现在来看，其实Java已经实现了相对于大多数编程语言的遥遥领先。Java是一个完整的平台，有一个庞大的库，其中包含了大量可重用的代码，还有一个提供诸如安全性、跨操作系统的可移植性以及自动垃圾收集等服务的执行环境。它既有令人舒适的语法，也有易于理解的语义，是一个功能齐全的出色语言和一个高质量的执行环境。种种优势于一身才能成就如今Java不可撼动的地位。 ","date":"2024-03-06","objectID":"/posts/things-you-need-to-know-about-java/:3:0","tags":["啃透Java基础知识"],"title":"【啃透Java基础知识】1什么是Java？关于Java你需要知道的一些事","uri":"/posts/things-you-need-to-know-about-java/"},{"categories":["essays"],"content":"我的第一篇博客","date":"2024-03-05","objectID":"/posts/start/","tags":["漫谈"],"title":"磨头小屋正式启动啦！","uri":"/posts/start/"},{"categories":["essays"],"content":" 你好呀历时两天，我终于初步把我的博客搭建起来了。就像一砖一瓦盖房子一般，虽然现在还是很简陋，但这个过程带给我的成就感是巨大的不过也很累就是了。 燃起想要搭一个个人博客的想法的原因是之前我在为准备明年的秋招而规划时，想要找一个地方好好地记录并复盘所学内容，同时可以把一些有共性的知识与问题分享出来。本来我想和之前一样在CSDN上记录记录算了，恰巧在写第一篇文章的第一句话的时候被我室友给瞧见了，他直接发出了灵魂拷问：你没有个人博客吗？ 我确实没有，但是他这么一说我觉得，拥有一个属于自己的博客好像是一件很酷的事情，不必拘泥于平台的限制，可以随心地将自己的所见所闻所思所想记录下来，于是我说干就干。经过整整两天的学习与试错，你眼前所见到的小网站才算完整地来到了这个世界。而这第一篇博客，可以说是我的博客站的最后一块拼图了，补完了它，后面所需要做的也就可以细水长流了。 ","date":"2024-03-05","objectID":"/posts/start/:0:0","tags":["漫谈"],"title":"磨头小屋正式启动啦！","uri":"/posts/start/"},{"categories":["essays"],"content":"\r1 简单介绍本小屋在可见的将来会分享四大方面的内容，分别是随笔，学习，项目以及我的求职过程。 随笔 的内容形式很多，不论是胡思乱想还是突发奇想还是异想天开都有，可长可短； 学习方面我则会将从今往后我学到的一些包括但不限于编程，软件使用，游戏攻略等一一分享出来； 项目方面我会对我做的一些项目（放在github上的）进行一些分析复盘； 求职过程的话我会记录一下面经什么的，感觉也很有价值。 ","date":"2024-03-05","objectID":"/posts/start/:1:0","tags":["漫谈"],"title":"磨头小屋正式启动啦！","uri":"/posts/start/"},{"categories":["essays"],"content":"\r2 怎么看博客方法很多，你可以从分类中找到你想要看的类别，也可以从标签中找到有共同标签的博客，例如关于某种特定编程语言的教程，或者可以直接搜索，看看能不能搜到你想要的。 ","date":"2024-03-05","objectID":"/posts/start/:2:0","tags":["漫谈"],"title":"磨头小屋正式启动啦！","uri":"/posts/start/"},{"categories":["essays"],"content":"\r3 更新时间随缘。 ","date":"2024-03-05","objectID":"/posts/start/:3:0","tags":["漫谈"],"title":"磨头小屋正式启动啦！","uri":"/posts/start/"},{"categories":null,"content":"wuqimotou's friends","date":"2024-03-05","objectID":"/friends/","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"\r","date":"2024-03-05","objectID":"/friends/:0:0","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"\r1 Base info想加入我的友链吗？快把你的小站信息发给我吧！ - nickname: 你的名字 avatar: 你的头像图片链接 url: 你的小站链接 description: 你的小站描述 ","date":"2024-03-05","objectID":"/friends/:1:0","tags":null,"title":"友情链接","uri":"/friends/"}]